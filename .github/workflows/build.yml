name: Generate game builds
on: 
  push:
    branches:
      - develop
      - master
  pull_request:
    branches:
      - develop
      - master
  workflow_dispatch:

env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  
jobs:
  checklicense:
    name: check if UNITY_LICENSE is set in github secrets
    runs-on: ubuntu-latest
    outputs:
      is_unity_license_set: ${{ steps.checklicense_job.outputs.is_unity_license_set }}
    steps:
      - name: Check whether unity activation requests should be done
        id: checklicense_job
        run: |
            echo "Skip activation job: ${{ env.UNITY_LICENSE != '' }}"
            echo "::set-output name=is_unity_license_set::${{ env.UNITY_LICENSE != '' }}"

  activation:
    needs: [checklicense]
    if: needs.checklicense.outputs.is_unity_license_set == 'false'
    name: Request activation file ðŸ”‘
    runs-on: ubuntu-latest
    steps:
      - name: Request manual activation file
        id: getManualLicenseFile
        uses: game-ci/unity-request-activation-file@v2.0-alpha-1
        with:
          unityVersion: 2020.3.15f2

      - name: Expose as artifact
        uses: actions/upload-artifact@v1
        with:
          name: ${{ steps.getManualLicenseFile.outputs.filePath }}
          path: ${{ steps.getManualLicenseFile.outputs.filePath }}

  build:
    needs: [checklicense]
    if: needs.checklicense.outputs.is_unity_license_set == 'true'
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        targetPlatform: [ 
          {unityPlatform: "StandaloneOSX",       outputName: "macOS"}, 
          {unityPlatform: "StandaloneWindows",   outputName: "Windows"}, 
          {unityPlatform: "StandaloneWindows64", outputName: "Windows (x64)"}, 
          {unityPlatform: "StandaloneLinux64",   outputName: "Linux (x64)"} 
        ]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Create LFS file list
      run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

    - name: Restore LFS cache
      uses: actions/cache@v2
      id: lfs-cache
      with:
        path: .git/lfs
        key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

    - name: Git LFS Pull
      run: |
        git lfs pull
        git add .
        git reset --hard

    - uses: actions/cache@v2
      with:
        path: Library
        key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
        restore-keys: |
          Library-

    - name: Build project
      uses: game-ci/unity-builder@v2
      env:
        UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
      with:
        targetPlatform: ${{ matrix.targetPlatform.unityPlatform }}
        buildName: 'Game Grumps: Joint Justice'

    - uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.targetPlatform.displayName }}
        path: build/${{ matrix.targetPlatform.unityPlatform }}

  createRelease:
    needs: [build]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    name: Create GitHub Release
    runs-on: ubuntu-latest
    steps:
    - name: Download StandaloneOSX
      uses: actions/download-artifact@v2
      with:
        name: macOS
        path: build/StandaloneOSX
    - name: Download StandaloneWindows
      uses: actions/download-artifact@v2
      with:
        name: Windows
        path: build/StandaloneWindows
    - name: Download StandaloneWindows64
      uses: actions/download-artifact@v2
      with:
        name: Windows (x64)
        path: build/StandaloneWindows64
    - name: Download StandaloneLinux64
      uses: actions/download-artifact@v2
      with:
        name: Linux (x64)
        path: build/StandaloneLinux64
        
    - name: Zip macOS
      run: zip -r "macOS.zip"         "build/macOS"
    - name: Zip Windows
      run: zip -r "Windows.zip"       "build/Windows"
    - name: Zip Windows (x64)
      run: zip -r "Windows (x64).zip" "build/Windows (x64)"
    - name: Zip Linux (x64)
      run: zip -r "Linux (x64).zip"   "build/Linux (x64)"
      
    - name: Create GitHub Release
      uses: ncipollo/release-action@v1.8.6
      with:
        artifacts: |
          "macOS [#${{ github.run_number }}].zip",
          "Windows [#${{ github.run_number }}].zip",
          "Windows (x64) [#${{ github.run_number }}].zip",
          "Linux (x64) [#${{ github.run_number }}].zip"
        tag: "${{ github.run_number }}"
        name: "Development release #${{ github.run_number }}"
        token: ${{ secrets.GITHUB_TOKEN }}
